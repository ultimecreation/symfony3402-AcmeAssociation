<?php

namespace AppBundle\Controller;

use AppBundle\Entity\User;
use Doctrine\ORM\EntityRepository;
use Symfony\Component\HttpFoundation\Request;
use FOS\RestBundle\Controller\Annotations\Route;
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use AlterPHP\EasyAdminExtensionBundle\EasyAdminExtensionBundle;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AdminController as BaseAdminController;
/**
 * Article controller.
 *
 * @Route("articles")
 */
class ArticlesController extends BaseAdminController 
{
    /**
     * @Route("/", name="easyadmin")
     */
    public function indexAction(Request $request)
    {
        return parent::indexAction($request);
    }
    public function createListQueryBuilder($entityClass, $sortDirection, $sortField = null, $dqlFilter = null)
    {
        if(!$this->getUser()->hasRole('ROLE_DIRECTION_ADMIN'))
            {
               
                $response =  parent::createListQueryBuilder('Articles', $sortDirection, $sortField, $dqlFilter); // TODO: Change the autogenerated stub
            $response->where('entity.userId = :userId')->setParameter('userId', $this->getUser()->getId());
            return $response;
            }
            $response =  parent::createListQueryBuilder('Articles', $sortDirection, $sortField, $dqlFilter); // TODO: Change the autogenerated stub
            
            return $response;
    }
    public function createEntityFormBuilder($entity, $view)
    {
        $formBuilder = parent::createEntityFormBuilder($entity, $view);

        // Here I overwrite field to be disabled
        if(!$this->getUser()->hasRole('ROLE_DIRECTION_ADMIN'))
        {
            $formBuilder->add('user', EntityType::class, array(
                'class' => 'AppBundle:User',
                'query_builder' => function (EntityRepository $er) {
                    return $er->createQueryBuilder('u')
                    ->where('u.id = :id')->setParameter('id',$this->getUser()->getId());
                },
            ));
            return $formBuilder;
        }
        $formBuilder->add('user', EntityType::class, array(
            'class' => 'AppBundle:User',
            'query_builder' => function (EntityRepository $er) {
                return $er->createQueryBuilder('u')
                    ->orderBy('u.username', 'asc');
            },
        ));
      

        return $formBuilder;
    }
   
    
}
// /**
    //  * Lists all article entities.
    //  *
    //  * @Route("/", name="articles_index")
    //  * @Method("GET")
    //  */
    // public function indexAction()
    // {
    //     $em = $this->getDoctrine()->getManager();

    //     $articles = $em->getRepository('AppBundle:Articles')->findAll();

    //     return $this->render('articles/index.html.twig', array(
    //         'articles' => $articles,
    //     ));
    // }

    // /**
    //  * Creates a new article entity.
    //  *
    //  * @Route("/new", name="articles_new")
    //  * @Method({"GET", "POST"})
    //  */
    // public function newAction(Request $request)
    // {
    //     $article = new Article();
    //     $form = $this->createForm('AppBundle\Form\ArticlesType', $article);
    //     $form->handleRequest($request);

    //     if ($form->isSubmitted() && $form->isValid()) {
    //         $em = $this->getDoctrine()->getManager();
    //         $em->persist($article);
    //         $em->flush();

    //         return $this->redirectToRoute('articles_show', array('id' => $article->getId()));
    //     }

    //     return $this->render('articles/new.html.twig', array(
    //         'article' => $article,
    //         'form' => $form->createView(),
    //     ));
    // }

    // /**
    //  * Finds and displays a article entity.
    //  *
    //  * @Route("/{id}", name="articles_show")
    //  * @Method("GET")
    //  */
    // public function showAction(Articles $article)
    // {
    //     $deleteForm = $this->createDeleteForm($article);

    //     return $this->render('articles/show.html.twig', array(
    //         'article' => $article,
    //         'delete_form' => $deleteForm->createView(),
    //     ));
    // }

    // /**
    //  * Displays a form to edit an existing article entity.
    //  *
    //  * @Route("/{id}/edit", name="articles_edit")
    //  * @Method({"GET", "POST"})
    //  */
    // public function editAction(Request $request, Articles $article)
    // {
    //     $deleteForm = $this->createDeleteForm($article);
    //     $editForm = $this->createForm('AppBundle\Form\ArticlesType', $article);
    //     $editForm->handleRequest($request);

    //     if ($editForm->isSubmitted() && $editForm->isValid()) {
    //         $this->getDoctrine()->getManager()->flush();

    //         return $this->redirectToRoute('articles_edit', array('id' => $article->getId()));
    //     }

    //     return $this->render('articles/edit.html.twig', array(
    //         'article' => $article,
    //         'edit_form' => $editForm->createView(),
    //         'delete_form' => $deleteForm->createView(),
    //     ));
    // }

    // /**
    //  * Deletes a article entity.
    //  *
    //  * @Route("/{id}", name="articles_delete")
    //  * @Method("DELETE")
    //  */
    // public function deleteAction(Request $request, Articles $article)
    // {
    //     $form = $this->createDeleteForm($article);
    //     $form->handleRequest($request);

    //     if ($form->isSubmitted() && $form->isValid()) {
    //         $em = $this->getDoctrine()->getManager();
    //         $em->remove($article);
    //         $em->flush();
    //     }

    //     return $this->redirectToRoute('articles_index');
    // }

    // /**
    //  * Creates a form to delete a article entity.
    //  *
    //  * @param Articles $article The article entity
    //  *
    //  * @return \Symfony\Component\Form\Form The form
    //  */
    // private function createDeleteForm(Articles $article)
    // {
    //     return $this->createFormBuilder()
    //         ->setAction($this->generateUrl('articles_delete', array('id' => $article->getId())))
    //         ->setMethod('DELETE')
    //         ->getForm()
    //     ;
    // }